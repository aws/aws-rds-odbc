name: Run Unit Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**/*.md'
      - '**/*.jpg'
      - '**/README.txt'
      - '**/LICENSE.txt'
      - 'docs/**'

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest # See https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    env:
      CMAKE_GENERATOR: Visual Studio 17 2022
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Verify prerequisite installations
        run: |
          echo "Environment variables:"
          Get-ChildItem Env:
          echo "----------------------------------------"
          echo "Path:"
          echo $env:Path
          echo "----------------------------------------"
          echo "msbuild version:"
          msbuild --version

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache AWS SDK libraries
        id: cache-static-aws-sdk
        uses: actions/cache@v4
        if: always() && steps.cache-static-aws-sdk.outputs.cache-hit != 'true'
        with:
          path: |
            aws_sdk
          key: ${{ runner.os }}-aws-sdk-static-lib

      - name: Build and install AWS SDK C++
        working-directory: ./scripts
        if: steps.cache-static-aws-sdk.outputs.cache-hit != 'true'
        run: |
          .\build_aws_sdk_win.ps1 x64 ${{env.BUILD_TYPE}} OFF "${{env.CMAKE_GENERATOR}}"

      - name: Create build environment
        run:
          cmake -E make_directory ${{github.workspace}}/build_ansi
          cmake -E make_directory ${{github.workspace}}/build_unicode

      - name: Configure the ANSI build
        run: cmake -S . -B build_ansi -DENABLE_UNIT_TESTS=TRUE

      - name: Build the ANSI library
        run: cmake --build build_ansi --config ${{env.BUILD_TYPE}}

      - name: Run the ANSI unit tests
        if: success()
        run: .\build_ansi\test\unit_test\bin\Release\unit_test.exe

      - name: Configure the Unicode build
        run: cmake -S . -B build_unicode -DUNICODE_BUILD=ON -DENABLE_UNIT_TESTS=TRUE

      - name: Build the Unicode library
        run: cmake --build build_unicode --config ${{env.BUILD_TYPE}}

      - name: Run the Unicode unit tests
        if: success()
        run: .\build_unicode\test\unit_test\bin\Release\unit_test.exe

  build-mac:
    name: macOS
    runs-on: macos-15 # See https://github.com/actions/runner-images/blob/main/images/macos/macos-15-arm64-Readme.md
    env:
      CMAKE_GENERATOR: Unix Makefiles
    steps:
      - name: Update Homebrew
        run: brew update && brew upgrade && brew cleanup

      - name: Install prerequisites
        run: |
          brew install unixodbc

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache AWS SDK libraries
        id: cache-static-aws-sdk
        uses: actions/cache@v4
        if: always() && steps.cache-static-aws-sdk.outputs.cache-hit != 'true'
        with:
          path: |
            aws_sdk
          key: ${{ runner.os }}-aws-sdk-cache-lib

      - name: Build and install AWS SDK C++
        working-directory: ./scripts
        if: steps.cache-static-aws-sdk.outputs.cache-hit != 'true'
        run: |
          ./build_aws_sdk_macos Release

      - name: Create build environment
        run:
          cmake -E make_directory ${{ github.workspace }}/build_ansi
          cmake -E make_directory ${{ github.workspace }}/build_unicode

      - name: Configure the ANSI build
        run: cmake -S . -B build_ansi -DENABLE_UNIT_TESTS=TRUE

      - name: Build the ANSI library
        run: cmake --build build_ansi --config $BUILD_TYPE

      - name: Run the ANSI unit tests
        if: success()
        run: ./build_ansi/test/unit_test/bin/unit_test

      - name: Configure the Unicode build
        run: cmake -S . -B build_unicode -DUNICODE_BUILD=ON -DENABLE_UNIT_TESTS=TRUE

      - name: Build the Unicode library
        run: cmake --build build_unicode --config $BUILD_TYPE

      - name: Run the Unicode unit tests
        if: success()
        run: ./build_unicode/test/unit_test/bin/unit_test
